using System;
using System.IO;
using System.Text;
using System.Windows.Forms;
using Spire.Doc;
using Spire.Pdf;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Transforms;
using Microsoft.ML.Transforms.Text;
using static DocumentArtificialIntellligenceSoftware.Form1;
using Spire.Doc.Documents;
using System.Runtime.InteropServices;
using Microsoft.Bot.Builder;

namespace DocumentArtificialIntellligenceSoftware
{
    public partial class Form1 : Form
    {
        private string documentway;
        private ITransformer model;
        private ITransformer question;
        private MLContext mlanswer;
        private ITransformer answermodel;
        public Form1()
        {
            InitializeComponent();

        }
        public class TextData
        {
            [LoadColumn(0)]
            public string Text { get; set; }


            [LoadColumn(1)]
            public bool Label { get; set; }

        }

        public class TextDataQuestion
        {
            [LoadColumn(0)]

            public string questionAnswer { get; set; }

            [LoadColumn(1)]

            public bool Label{ get; set; }
        }

        public class Textprediction
        {

            [ColumnName("PredictedLabel")]
            public UInt32 PredictedLabel;

            [ColumnName("PredictedLanguage")]
            public string PredictedLanguage;
        }

        

        private void btnchoosefile_Click(object sender, EventArgs e)
        {
            OpenFileDialog ofd = new OpenFileDialog();
            ofd.Filter = "PDF Files|*.pdf|Word Files|*.doc;*.docx";
            ofd.Title = "Choose your document";

            if (ofd.ShowDialog() == DialogResult.OK)
            {
                documentway = ofd.FileName;
                label2.Text = "File name: " + Path.GetFileName(documentway);
                IDataView data = null;
                var mlContext = new MLContext();

                if (Path.GetExtension(documentway).Equals(".pdf", StringComparison.CurrentCultureIgnoreCase))
                {
                    PdfDocument pdf = new PdfDocument();
                    pdf.LoadFromFile(documentway);

                    StringBuilder pdftext = new StringBuilder();

                    foreach (PdfPageBase page in pdf.Pages)
                    {
                        pdftext.Append(page.ExtractText());
                    }
                    richtextboxChat.Text = pdftext.ToString();
                    var pdfData = mlContext.Data.LoadFromEnumerable(new[] { new TextData { Text = pdftext.ToString() } });
                    data = pdfData;
                    var dataPipeline = mlContext.Transforms.Text.FeaturizeText("Features", "Text")
    .Append(mlContext.Transforms.NormalizeMinMax("Features"))
    .Append(mlContext.Transforms.Conversion.MapValueToKey("Label"))
    .Append(mlContext.Transforms.NormalizeBinning("Features"))
    .Append(mlContext.Transforms.NormalizeLogMeanVariance("Features"))
    .Append(mlContext.Transforms.NormalizeLogMeanVariance("Features"))
    .Append(mlContext.Transforms.NormalizeMeanVariance("Features"));

                    var model = mlContext.MulticlassClassification.Trainers.NaiveBayes();//with this code we define train the model
                    var trainedmodel = dataPipeline.Append(model).Fit(data);
                    //var textpdf = pdfData.ToString();

                    //richtextboxChat.Text = textpdf;
                    //var Wordvector = NWord2Vec.Model.Load(textpdf); 
                    //var data = new List<string>();
                    //data.Add(textpdf);
                    //var model = mlContext.Model;

                }

                if (Path.GetExtension(documentway).Equals(".docx", StringComparison.CurrentCultureIgnoreCase))
                {
                    Document word = new Document();
                    word.LoadFromFile(documentway);
                    string wordtext = word.GetText();
                    richtextboxChat.Text = wordtext;
                    //IDataView worddata = mlContext.Data.LoadFromTextFile(wordtext);
                    var wordData = mlContext.Data.LoadFromEnumerable(new[] { new TextData { Text = wordtext, Label = false } });
                    data = wordData;

                    var dataPipeline = mlContext.Transforms.Text.FeaturizeText("Features", "Text")
    .Append(mlContext.Transforms.NormalizeMinMax("Features"))
    .Append(mlContext.Transforms.Conversion.MapValueToKey("Label"))
    .Append(mlContext.Transforms.NormalizeBinning("Features"))
    .Append(mlContext.Transforms.NormalizeLogMeanVariance("Features"))
    .Append(mlContext.Transforms.NormalizeLogMeanVariance("Features"))
    .Append(mlContext.Transforms.NormalizeMeanVariance("Features"));

                    var model = mlContext.MulticlassClassification.Trainers.NaiveBayes();//with this code we define train the model
                    var trainedmodel = dataPipeline.Append(model).Fit(data);
                    //trainedmodel.Fit(data);
                }

            }
        }

        private void rdbuttonturkish_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void btnsend_Click(object sender, EventArgs e)
        {
             
            IDataView questiondata;
            string question = txtchatpart.Text;
            var userquestion = new MLContext();
            var questionuser = userquestion.Data.LoadFromEnumerable(new[] { new TextDataQuestion { questionAnswer = question , Label = false} });
            questiondata = questionuser;

            /*var questionTrain = new List<TextDataQuestion>
            {
                new TextDataQuestion { questionAnswer = question }
            };*/
            var dataPipeline = userquestion.Transforms.Text.FeaturizeText("Features", "questionAnswer")
    .Append(userquestion.Transforms.NormalizeMinMax("Features"))
    .Append(userquestion.Transforms.Conversion.MapValueToKey("Label"))
    .Append(userquestion.Transforms.NormalizeBinning("Features"))
    .Append(userquestion.Transforms.NormalizeLogMeanVariance("Features"))
    .Append(userquestion.Transforms.NormalizeLogMeanVariance("Features"))
    .Append(userquestion.Transforms.NormalizeMeanVariance("Features"));

            var modelQuestion = userquestion.MulticlassClassification.Trainers.NaiveBayes();//with this code we define train the model
            var trainedmodelanswer = dataPipeline.Append(modelQuestion).Fit(questiondata);
            mlanswer = new MLContext();

            if (trainedmodelanswer == null)
            {
                MessageBox.Show("Message can not be downloaded!");
            }

            

            var answerPredictionEngine = mlanswer.Model.CreatePredictionEngine<TextDataQuestion, Textprediction>(trainedmodelanswer);
            var predictions = answerPredictionEngine.Predict(new TextDataQuestion { questionAnswer = question, Label = false });
            var predictedLanguage = predictions.PredictedLanguage;
            MessageBox.Show($"Predicted Answer: {predictedLanguage}"); 
        }
    }
}
